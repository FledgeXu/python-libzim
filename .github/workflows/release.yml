name: release
on:
  release:
    types: [published]
    tags:
      - v*

env:
  LIBZIM_VERSION: 8.1.0
  LIBZIM_INCLUDE_PATH: include/zim
  TWINE_USERNAME: __token__
  TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  # TWINE_PASSWORD: ${{ secrets.PYPI_TEST_API_TOKEN }}
  # TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/

jobs:
  release:
    environment: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-12]
        python-version: ["3.6.15", "3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.2.0
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: set macOS environ
        if: matrix.os == 'macos-12'
        run: |
          echo LIBZIM_EXT=dylib >> $GITHUB_ENV
          echo LIBZIM_RELEASE=libzim_macos-x86_64-$LIBZIM_VERSION >> $GITHUB_ENV
          echo LIBZIM_LIBRARY_PATH=lib/libzim.${LIBZIM_VERSION:0:1}.dylib >> $GITHUB_ENV
          echo PLAFTORM_NAME=macosx_10.9_x86_64 >> $GITHUB_ENV
          echo RPATH=@loader_path/ >> $GITHUB_ENV

      - name: install Apple certificate
        if: matrix.os == 'macos-12'
        shell: bash
        env:
          CERTIFICATE: /tmp/wmch-devid.p12
        run: |
          echo "${{ secrets.APPLE_SIGNING_CERTIFICATE }}" | base64 --decode -o $CERTIFICATE
          security create-keychain -p mysecretpassword $(pwd)/build.keychain
          security default-keychain -s $(pwd)/build.keychain
          security unlock-keychain -p mysecretpassword $(pwd)/build.keychain
          security import $CERTIFICATE -k $(pwd)/build.keychain -P "${{ secrets.APPLE_SIGNING_P12_PASSWORD }}" -A
          rm $CERTIFICATE
          security set-key-partition-list -S "apple-tool:,apple:" -s -k mysecretpassword $(pwd)/build.keychain
          security find-identity -v
          xcrun notarytool store-credentials \
            --apple-id "${{ secrets.APPLE_SIGNING_ALTOOL_USERNAME }}" \
            --password "${{ secrets.APPLE_SIGNING_ALTOOL_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_SIGNING_TEAM }}" \
            --validate \
            --keychain $(pwd)/build.keychain \
            build-profile

      - name: set linux environ
        if: matrix.os == 'ubuntu-20.04'
        run: |
          echo LIBZIM_EXT=so >> $GITHUB_ENV
          echo LIBZIM_RELEASE=libzim_linux-x86_64-$LIBZIM_VERSION >> $GITHUB_ENV
          echo LIBZIM_LIBRARY_PATH=lib/x86_64-linux-gnu/libzim.so.$LIBZIM_VERSION >> $GITHUB_ENV
          echo PLAFTORM_NAME=manylinux1_x86_64 >> $GITHUB_ENV
          echo RPATH=\$ORIGIN >> $GITHUB_ENV

      - name: Cache libzim dylib & headers
        uses: actions/cache@master
        id: cache-libzim
        with:
          path: libzim_dist
          key: ${{ env.LIBZIM_RELEASE }}-libzim-cache

      - name: Download libzim dylib & headers from OpenZIM.org releases
        if: steps.cache-libzim.outputs.cache-hit != 'true'
        run: |
          wget -q https://download.openzim.org/release/libzim/$LIBZIM_RELEASE.tar.gz
          tar --gunzip --extract --file=$LIBZIM_RELEASE.tar.gz
          mv $LIBZIM_RELEASE libzim_dist

      - name: Link Linux libzim dylib & headers into workspace lib and include folders
        if: matrix.os == 'ubuntu-20.04'
        run: |
          cp -dp $GITHUB_WORKSPACE/libzim_dist/lib/x86_64-linux-gnu/* lib/
          ln -sf libzim.so.${LIBZIM_VERSION:0:1} lib/libzim.so
          ln -sf $GITHUB_WORKSPACE/libzim_dist/$LIBZIM_INCLUDE_PATH include/zim

      - name: Link macOS libzim dylib & headers into workspace lib and include folders
        if: matrix.os == 'macos-12'
        run: |
          cp -Pp $GITHUB_WORKSPACE/libzim_dist/lib/* lib/
          ln -sf libzim.${LIBZIM_VERSION:0:1}.dylib lib/libzim.dylib
          ln -sf $GITHUB_WORKSPACE/libzim_dist/$LIBZIM_INCLUDE_PATH include/zim

      - name: Build cython and sdist
        run: |
          pip install --upgrade "cython>=0.29.32,<3.0" setuptools pip wheel
          python3 setup.py build_ext --rpath $RPATH
          if [[  "${{ matrix.python-version }}" == "3.8" ]]
          then
            python3 setup.py sdist
          fi

      - name: add macOS libzim binary to source for wheel
        if: matrix.os == 'macos-12'
        run: |
          install_name_tool -change libzim.${LIBZIM_VERSION:0:1}.dylib @loader_path/libzim.${LIBZIM_VERSION:0:1}.dylib $(find build -name "libzim.cpython*.so")
          cp -pv lib/libzim.${LIBZIM_VERSION:0:1}.dylib $(find build/lib* -type d)/

      - name: sign macOS wrapper binary
        if: matrix.os == 'macos-12'
        run: |
          echo "make sure libzim is signed and notarized"
          spctl -a -v -t install lib/libzim.${LIBZIM_VERSION:0:1}.dylib
          wrapper=$(find build -name "libzim.cpython*.so")
          echo "sign the wrapper"
          codesign --force --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" ${wrapper} --deep --timestamp
          echo "create ZIP package for notarization request"
          wrapper_zip="${wrapper}.zip"
          ditto -c -k --keepParent ${wrapper} ${wrapper_zip}
          echo "request notarization"
          security unlock-keychain -p mysecretpassword $(pwd)/build.keychain
          xcrun notarytool submit --keychain $(pwd)/build.keychain --keychain-profile "build-profile" --wait ${wrapper_zip}
          echo "remove zip file"
          rm ${wrapper_zip}
          echo "display request status (should be rejected)"
          spctl --assess -vv --type install ${wrapper}

      - name: add Linux libzim binary to source for wheel
        if: matrix.os == 'ubuntu-20.04'
        run: cp -pv lib/libzim.so.${LIBZIM_VERSION:0:1} $(find build/lib* -type d)/

      - name: build wheel
        run: python3 setup.py bdist_wheel --plat-name=$PLAFTORM_NAME

      - uses: actions/upload-artifact@v1
        with:
          name: wheels
          path: ./dist

      - name: Push release to PyPI
        if: github.event_name == 'release'
        run: |
          pip install --upgrade twine
          twine check dist/*
          if [  "${{ matrix.os }}" == "ubuntu-20.04" -a "${{ matrix.python-version }}" = "3.8" ]
          then
            twine upload dist/*.tar.gz
          fi
          twine upload dist/*.whl
